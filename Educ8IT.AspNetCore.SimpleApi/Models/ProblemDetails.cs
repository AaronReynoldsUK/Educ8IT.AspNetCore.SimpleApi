// Copyright (c) Aaron Reynolds. All rights reserved. Licensed under the Apache License, Version 2.0.

using Educ8IT.AspNetCore.SimpleApi.ThirdParty;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace Educ8IT.AspNetCore.SimpleApi.Models
{
    /// <summary>
    /// Implementation of https://tools.ietf.org/html/rfc7807
    /// Response type should be application/problem+json or application/problem+xml
    /// Sub-classes can add additional extensions for e.g. validation information
    /// </summary>
    [Serializable()]
    [System.Xml.Serialization.XmlRoot("problemDetails")]
    public class ProblemDetails
    {
        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. 
        /// This specification encourages that, when dereferenced, 
        ///   it provide human-readable documentation for the 
        ///   problem type (e.g., using HTML [W3C.REC-html5-20141028]).  
        ///   When this member is not present, its value is assumed to be "about:blank".
        /// </summary>
        [Required]
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        [System.Xml.Serialization.XmlElement("type")]        
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.  
        /// It SHOULD NOT change from occurrence to occurrence of the problem, 
        ///   except for purposes of localization 
        ///   (e.g., using proactive content negotiation; see[RFC7231], Section 3.4).
        /// </summary>
        [Required]
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        [System.Xml.Serialization.XmlElement("title")]        
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code ([RFC7231], Section 6) 
        ///   generated by the origin server for this occurrence of the problem.
        /// </summary>
        [Required]
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        [System.Xml.Serialization.XmlElement("status")]        
        public int Status
        {
            get
            {
                return (int)StatusCode;
            }
            set
            {
                if (Enum.TryParse<HttpStatusCode>(value.ToString(), out HttpStatusCode httpStatusCode))
                    StatusCode = httpStatusCode;
                else
                    StatusCode = HttpStatusCode.InternalServerError;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnore]
        [Newtonsoft.Json.JsonIgnore]
        [System.Xml.Serialization.XmlIgnore]
        public HttpStatusCode StatusCode
        {
            get; set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ShouldSerializeStatusCode()
        {
            return false;
        }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "detail")]
        [System.Xml.Serialization.XmlElement("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.  
        /// It may or may not yield further information if dereferenced.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "instance")]
        [System.Xml.Serialization.XmlElement("instance")]
        public string Instance { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("validation")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "validation")]
        [System.Xml.Serialization.XmlArray("validation")]
        [System.Xml.Serialization.XmlArrayItem("validationItem")]
        public List<ProblemDetailsExtension> Validation { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ShouldSerializeValidation()
        {
            return Validation != null && Validation.Count > 0;
        }

        /// <summary>
        /// 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "extensions")]
        [System.Xml.Serialization.XmlArray("extensions")]
        [System.Xml.Serialization.XmlArrayItem("extensionsItem")]
        public List<ProblemDetailsExtension> Extensions { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ShouldSerializeExtensions()
        {
            return Extensions != null && Extensions.Count > 0;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    //[XmlRoot("extensionsItem")]
    //[XmlArrayItem("extensionsItem")]
    public class ProblemDetailsExtension
    {
        /// <summary>
        /// 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "key")]
        [System.Xml.Serialization.XmlElement("key")]
        public string Key { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("items")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "items")]
        [System.Xml.Serialization.XmlArray("items")]
        [System.Xml.Serialization.XmlArrayItem("item")]
        public List<string> Items { get; set; }
    }
}
