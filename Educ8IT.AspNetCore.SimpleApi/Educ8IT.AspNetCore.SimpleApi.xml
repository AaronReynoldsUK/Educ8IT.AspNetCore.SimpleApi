<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Educ8IT.AspNetCore.SimpleApi</name>
    </assembly>
    <members>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult">
            <summary>
            Standard result from Actions
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.ResultObject">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.#ctor(System.Net.HttpStatusCode,System.Object)">
            <summary>
            Default Constructor.
            Create a generic <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/>
            </summary>
            <param name="statusCode">HTTP Status Code returned to Client</param>
            <param name="resultObject">Actual response object to be converted/formatted and returned to Client</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.OK(System.Object)">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for an "OK" response.
            OK = 200.
            Used for:
            - GET = return an Entity header+body
            - HEAD = return an Entity header
            </summary>
            <param name="resultObject">Actual response object to be converted/formatted and returned to Client</param>
            <returns>An <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for an "OK" response.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.Created(System.Object)">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for a "Created" response.
            Created = 201.
            Used for:
            - POST = An Entity has been created.
            Consider using <see cref="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.CreatedAt(System.Object,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)"/> instead.
            </summary>
            <param name="resultObject">Actual response object to be converted/formatted and returned to Client</param>
            <returns>An <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for a "Created" response.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.CreatedAt(System.Object,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for a "Created" response complete with simple HATEOS.
            </summary>
            <param name="resultObject">The Entity created which is to be returned to Client within a HATEOS response</param>
            <param name="links">HATEOS links for the Entity</param>
            <returns>A HateosActionResult object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.Accepted(System.Object)">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for an "Accepted" response.
            Accepted = 202.
            Used for:
            - POST = The request was Accepted but has not yet been processed.
            Consider sending a HATEOS variation that can be used to check progress.
            An example is to use <see cref="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.AcceptedWithStatusAt(System.Object,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)"/>.
            </summary>
            <param name="resultObject">Information about the request status converted/formatted and returned to Client</param>
            <returns>An <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> with information about the request to go as a response.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.AcceptedWithStatusAt(System.Object,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for an "Accepted" response.
            Accepted = 202.
            Used for:
            - POST = The request was Accepted but has not yet been processed.
            </summary>
            <param name="resultObject">Information about the request status converted/formatted and returned to Client</param>
            <param name="links">HATEOS links for the Entity or Status of the Entity</param>
            <returns>A HateosActionResult object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.NoContent">
            <summary>
            Return an <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for a "NoContent" response.
            NoContent = 204.
            Used for:
            - GET - where the Entity exists but no content is returnable
            - PUT - following an Update
            - PATCH - following an Update
            - DELETE - following a Deletion
            </summary>
            <returns>No Content</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.MovedPermanently(Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)">
            <summary>
            TODO: put link into Location header
            </summary>
            <param name="links"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.GetHateosActionResult(System.Net.HttpStatusCode,System.Object,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)">
            <summary>
            
            </summary>
            <param name="httpStatusCode"></param>
            <param name="resultObject"></param>
            <param name="links"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.OK(System.Object,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="resultObject"></param>
            <param name="totalRecordCount"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.GetPagedActionResult(System.Net.HttpStatusCode,System.Object,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="httpStatusCode"></param>
            <param name="resultObject"></param>
            <param name="totalRecordCount"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.Error(Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails)">
            <summary>
            Use for:
            400 = Bad Request
            401 = Unauthorised ??
            403 = Forbidden ??
            404 = Not Found ??
            405 = Method Not Allowed - no this will be handled before Action
            409 = Conflict ??
            411 = Length Required - can use FromHeader(Content-Length) or need to add a Header Requirement
            412 = Procondition Failed ??
            429 = Too Many Requests - will be handled before Action
            500 = Internal Server Error
            503 = Service Unavailable - will be handled before Action
            </summary>
            <param name="problemDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult.BadRequest(Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails)">
            <summary>
            Returns a <see cref="T:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails"/> <see cref="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.ActionResult"/> for a Bad Request.
            Bad Request = 400
            </summary>
            <param name="problemDetails"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosActionResult`1">
            <summary>
            Used to return a HATEOS result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosActionResult`1.#ctor(System.Net.HttpStatusCode,`0,Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks)">
            <summary>
            Default Contructor
            </summary>
            <param name="statusCode">HTTP status code for Response</param>
            <param name="resultObject">Object to be encapsulated in HATEOS response</param>
            <param name="links">HATEOS links for this response</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult">
            <summary>
            Interface for all Action Results
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult.StatusCode">
            <summary>
            HTTP Status Code returned to Client
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult.ResultObject">
            <summary>
            Actual response object to be converted/formatted and returned to Client
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult.ResultType">
            <summary>
            CLR type of <see cref="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult.ResultObject"/>
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.IPagedActionResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IPagedActionResult.PageNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IPagedActionResult.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IPagedActionResult.PageCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.IPagedActionResult.RecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedActionResult`1">
            <summary>
            Used to return a Paged ActionResult
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedActionResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
            <param name="resultObject"></param>
            <param name="totalRecordCount"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObject`1">
            <summary>
            Generic HATEOS result / response object.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObject`1.Links">
            <summary>
            HATEOS Links for this object
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObject`1.ResultObject">
            <summary>
            Response Object
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks.Get">
            <summary>
            The Uri to GET this Entity
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks.Update">
            <summary>
            The Uri to UPDATE this Entity
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks.Patch">
            <summary>
            The Uri to PATCH this Entity
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.HateosResultObjectLinks.Delete">
            <summary>
            The Uri to DELETE this Entity
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1.ResultObject">
            <summary>
            Response Object
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1.PageNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1.PageCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionResults.PagedResultObject`1.RecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription">
            <summary>
            Abstract implementation of <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription"/>.
            Contains the basic functionality so overloaded versions can be used easily.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions})">
            <summary>
            Initialise the ApiDescription with a copy of the <see cref="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.ApiMapperOptions"/>
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.ApiMapperOptions">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.Controllers">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.Methods">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GeneratedModels">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.Versions">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetApiMethodItem(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetControllersAndMethods">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.InitialiseController(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetVersionedControllers">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetTypeDescription(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GenerateTypeDescription(System.Type,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetTypeByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.ApiDescription.GetTypeByName(System.String,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider@)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.DefaultApiDescription">
            <summary>
            Default implementation of the abstract base class
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.DefaultApiDescription.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions})">
            <summary>
            Default contructor
            </summary>
            <param name="apiMapperOptions"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription">
            <summary>
            A meta description of the API in terms of Controllers, Methods/Actions and Types.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.ApiMapperOptions">
            <summary>
            Options that determine the working of the API system
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.Controllers">
            <summary>
            A list of <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem"/>.
            These are class representations of the API controller classes.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.Methods">
            <summary>
            A list of <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem"/>.
            These are class representations of the API methods/actions.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GeneratedModels">
            <summary>
            A collections of the <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription"/> objects representing Types used by the API.
            Mostly used in documentation.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.Versions">
            <summary>
            A list of <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion"/> versions supported by the API.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.Reset">
            <summary>
            Clear the Controllers and Actions/Methods so the documentation will be rebuilt.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetApiMethodItem(System.String,System.String)">
            <summary>
            Get an <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem"/> by controller name and method name.
            </summary>
            <param name="controllerName">The name of the parent controller for the Method</param>
            <param name="methodName">The name of the Method to return</param>
            <returns>An <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem"/> representation of the Method found</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetControllersAndMethods">
            <summary>
            Populate and return an initialised list of IApiControllerItem
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.InitialiseController(System.Type)">
            <summary>
            Initialise ApiControllerItem from controller type
            </summary>
            <param name="controllerType">Controller class type</param>
            <returns>An ApiControllerItem object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetVersionedControllers">
            <summary>
            Get a collection of the controllers and methods organised by <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion"/>.
            </summary>
            <returns>Dictionary of controllers, keyed by version. Each version set contains all controllers/methods supported by that version.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetTypeDescription(System.Type)">
            <summary>
            Returns a matching <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription"/> object for a CLR type.
            </summary>
            <param name="type">The CLR type to look up.</param>
            <returns>The matching type description</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GenerateTypeDescription(System.Type,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <summary>
            Generate and return the <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription"/> for a CLR type.
            </summary>
            <param name="type">The CLR type to generate a type description for.</param>
            <param name="documentationProvider">The documentation provider to use in generation.</param>
            <returns>The matching type description</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetTypeByName(System.String)">
            <summary>
            Get a CLR object of the specified type.
            This searches all documentation providers for a match.
            </summary>
            <param name="typeFullName">The name of the type to find and return. Types are checked by full name, then name.</param>
            <returns>The matching CLR type if found.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription.GetTypeByName(System.String,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider@)">
            <summary>
            Get a CLR object of the specified type.
            This searches all documentation providers for a match.
            </summary>
            <param name="typeFullName">The name of the type to find and return. Types are checked by full name, then name.</param>
            <param name="documentationProvider">The first documentation provider that matched.</param>
            <returns>The matching CLR type if found.</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeInformation.SimpleTypes">
            <summary>
            
            ... Modify this to add more default documentations
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Documentation.Annotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Documentation.Annotation.AnnotationTextGenerator">
            <summary>
            
            ... Modify this to support more data annotation attributes.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Documentation.Annotation.GenerateAnnotations(Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Documentation.ParameterAnnotation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Documentation.ParameterAnnotation.AnnotationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Documentation.ParameterAnnotation.Documentation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.Parse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.Form">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.UploadedFiles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.FormBody">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.XmlFromBody">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.FormattedBody.JsonFromBody">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.MediaTypeHeaderValueExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.MediaTypeHeaderValueExtensions.MatchesTypeAndSuffixOrSubType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue,System.String)">
            <summary>
            
            </summary>
            <param name="mediaTypeHeaderValue"></param>
            <param name="mediaTypeHeaderValueForComparision"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.MediaTypeHeaderValueExtensions.MatchesTypeAndSuffixOrSubType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            
            </summary>
            <param name="mediaTypeHeaderValue"></param>
            <param name="mediaTypeHeaderValueForComparision"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.#ctor(Microsoft.AspNetCore.Http.HttpContext,Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="actionResult"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.FormattedResponseContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.ResponseContentClrType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.ContentLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.Headers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.HttpContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject.ActionResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ProblemDetailsValidationExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ProblemDetailsValidationExtensions.AddValidationItem(Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="problemDetails"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ProblemDetailsValidationExtensions.AddItem(Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="problemDetails"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.AdditionalInformationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.AdditionalInformationAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Text"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.AdditionalInformationAttribute.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IAdditionalInformationInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IAdditionalInformationInterface.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedRequestContentTypeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedRequestContentTypeAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ContentType"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedRequestContentTypeAttribute.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IAllowedRequestContentTypeInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IAllowedRequestContentTypeInterface.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedResponseContentTypeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedResponseContentTypeAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ContentType"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.AllowedResponseContentTypeAttribute.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IAllowedResponseContentTypeInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IAllowedResponseContentTypeInterface.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute">
            <summary>
            Specifies an attribute route on a controller.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.#ctor(System.String)">
            <summary>
            Alternate contructor.
            Uses the value of "{controller}" as the default route
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.#ctor(System.String,System.String[])">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute"/> with the given route template.
            </summary>
            <param name="name">The documented name of this Controller</param>
            <param name="routeTemplates">The route template. May not be null.</param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.RouteTemplates">
            <inheritdoc />
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower order
            value are tried first. If an action defines a route by providing an <see cref="T:Educ8IT.AspNetCore.SimpleApi.IRouteTemplateProvider"/>
            with a non <c>null</c> order, that order is used instead of this value. If neither the action nor the
            controller defines an order, a default value of 0 is used.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.Educ8IT#AspNetCore#SimpleApi#IRouteTemplateProvider#Order">
            <inheritdoc />
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiControllerAttribute.Name">
            <inheritdoc />
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiDisplayNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiDisplayNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiDisplayNameAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IApiDisplayNameInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IApiDisplayNameInterface.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.ExcludeFromDocumentation">
            <summary>
            The Property will still be mapped, but the public documentation will not display this method.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.ExcludeIfParentTypeIn">
            <summary>
            The Property will still be mapped, but the public documentation will not display this method if their parent is in this set of Types.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.DbFieldName">
            <summary>
            Used to remove Field name from an Update
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.IsDeprecated">
            <summary>
            Marks this Property as Deprecated / Obsolete
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiPropertyAttribute.DeprecationAdvice">
            <summary>
            Tells the API user which Property to use in its place (if appropriate)
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ExcludeFromDocumentationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ExcludeFromDocumentationAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ExcludeFromDocumentationAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="ShouldExclude"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ExcludeFromDocumentationAttribute.ShouldExclude">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IExcludeFromDocumentationInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IExcludeFromDocumentationInterface.ShouldExclude">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpDeleteAttribute">
            <summary>
            Identifies an action that supports the HTTP DELETE method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpDeleteAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpDeleteAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpDeleteAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpDeleteAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpGetAttribute">
            <summary>
            Identifies an action that supports the HTTP GET method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpGetAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpGetAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpGetAttribute.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpGetAttribute"/> with the given route template.
            </summary>
            <param name="routeTemplates">The route template(s). May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpHeadAttribute">
            <summary>
            Identifies an action that supports the HTTP HEAD method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpHeadAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpHeadAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpHeadAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpHeadAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute">
            <summary>
            Identifies an action that supports a given set of HTTP methods.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute"/> with the given
            set of HTTP methods.
            <param name="httpMethods">The set of supported HTTP methods. May not be null.</param>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute"/> with the given
            set of HTTP methods an the given route template.
            </summary>
            <param name="httpMethods">The set of supported methods. May not be null.</param>
            <param name="routeTemplates">The route template.</param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.HttpMethods">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.RouteTemplates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpMethodAttribute.Name">
            <inheritdoc />
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpOptionsAttribute">
            <summary>
            Identifies an action that supports the HTTP OPTIONS method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpOptionsAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpOptionsAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpOptionsAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpOptionsAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPatchAttribute">
            <summary>
            Identifies an action that supports the HTTP PATCH method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPatchAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPatchAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPatchAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPatchAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPostAttribute">
            <summary>
            Identifies an action that supports the HTTP POST method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPostAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPostAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPostAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPostAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPutAttribute">
            <summary>
            Identifies an action that supports the HTTP PUT method.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPutAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPutAttribute"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPutAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Educ8IT.AspNetCore.SimpleApi.Attributes.HttpPutAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IActionHttpMethodProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IActionHttpMethodProvider.HttpMethods">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.IgnoreAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.IgnoreAttribute.ShouldIgnore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.IgnoreAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.IgnoreAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="shouldIgnore"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ParameterBindingAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromBodyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromBodyAttribute.#ctor">
            <summary>
            Default Attribute constructor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromBodyAttribute.#ctor(System.String)">
            <summary>
            Alternate constructor where the parameter supplied has a different name to the method's parameter
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromBodyAttribute.Alias">
            <summary>
            The parameter name sent to the API
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromContextAttribute">
            <summary>
            Read value from HttpContext Items
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromContextAttribute.#ctor(System.String)">
            <summary>
            Default Attribute constructor
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromContextAttribute.ContextItemName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromFormAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromFormAttribute.#ctor">
            <summary>
            Default Attribute constructor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromFormAttribute.#ctor(System.String)">
            <summary>
            Alternate constructor where the parameter supplied has a different name to the method's parameter
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromFormAttribute.Alias">
            <summary>
            The parameter name sent to the API
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromHeaderAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromHeaderAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="headerName"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromHeaderAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromQueryAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromQueryAttribute.#ctor">
            <summary>
            Default Attribute constructor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromQueryAttribute.#ctor(System.String)">
            <summary>
            Alternate constructor where the parameter supplied has a different name to the method's parameter
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromQueryAttribute.Alias">
            <summary>
            The parameter name sent to the API
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromRouteAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromRouteAttribute.#ctor">
            <summary>
            Default Attribute constructor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.FromRouteAttribute.#ctor(System.String)">
            <summary>
            Alternate constructor where the parameter supplied has a different name to the method's parameter
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.FromRouteAttribute.Alias">
            <summary>
            The parameter name sent to the API
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.FromServiceAttribute">
            <summary>
            Not yet implemented
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.PropertyAliasAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.PropertyAliasAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.PropertyAliasAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Alias"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.PropertyAliasAttribute.Alias">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseHeaderAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseHeaderAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseHeaderAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseHeaderAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.HttpResponseCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.HttpStatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.ResponseType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            
            </summary>
            <param name="httpResponseCode"></param>
            <param name="responseType"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.#ctor(System.Net.HttpStatusCode,System.Type)">
            <summary>
            
            </summary>
            <param name="httpResponseCode"></param>
            <param name="responseType"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ResponseTypeAttribute.#ctor(System.Net.HttpStatusCode)">
            <summary>
            
            </summary>
            <param name="httpResponseCode"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.TypeNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription"/> generated for a type.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.TypeNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.TypeNameAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.VersionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.VersionAttribute.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.VersionAttribute.Deprecated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.VersionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            API verions
            </summary>
            <param name="major">APIs with the same name but different major versions are not interchangeable.</param>
            <param name="minor">If the name and major version number on two APIs are the same, 
                but the minor version number is different, 
                this indicates significant enhancement with the intention of backward compatibility.</param>
            <param name="build">A difference in build number represents a recompilation of the same source.</param>
            <param name="revision">APIs with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable.</param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Build">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.VersionText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="build"></param>
            <param name="revision"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.#ctor(System.Version)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.TryParse(System.String,Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion@)">
            <summary>
            
            </summary>
            <param name="versionString"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.Equals(Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.EqualsSameMajorAndMinor(Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.FromMajorAndMinor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.HasBuild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.HasRevision">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.IRouteTemplateProvider">
            <summary>
            Interface for attributes which can supply a route template for attribute routing.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IRouteTemplateProvider.RouteTemplates">
            <summary>
            The route templates. May be null.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IRouteTemplateProvider.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets a default value of 0.
            A null value for the Order property means that the user didn't specify an explicit order for the
            route.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IRouteTemplateProvider.Name">
            <summary>
            Gets the route name. The route name can be used to generate a link using a specific route, instead
             of relying on selection of a route based on the given set of route values.
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.Conversion">
            <summary>
            Common data-type conversion extension methods
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToString(System.Object,Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat)">
            <summary>
            Converts an object to a specific string representation
            </summary>
            <param name="dataIn"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToInt32(System.Object,System.Int32)">
            <summary>
            Convert numeric object data / strings to Int32 with a fall-back value.
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToInt32(System.Object)">
            <summary>
            Convert numeric object data / strings to Int32 or nullable.
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToInt64(System.Object,System.Int64)">
            <summary>
            Convert numeric object data / strings to Int64 with a fall-back value.
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToInt64(System.Object)">
            <summary>
            Convert numeric object data / strings to Int64 or nullable.
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToHex(System.Nullable{System.Int64})">
            <summary>
            Converts a Nullable Int64 to Hex value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.FromHex(System.String)">
            <summary>
            Converts a Hex value into a Nullable Int64
            </summary>
            <param name="hexValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Converts an object/string to Decimal
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToDecimal(System.Object)">
            <summary>
            Converts an object/string to a Nullable Decimal
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToDouble(System.Object,System.Double)">
            <summary>
            Converts an object/string to Double
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToDouble(System.Object)">
            <summary>
            Converts an object/string to a Nullable Double
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToSingle(System.Object,System.Single)">
            <summary>
            Converts an object/string to Single
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToSingle(System.Object)">
            <summary>
            Converts an object/string to a Nullable Single
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToBool(System.Object,System.Boolean)">
            <summary>
            Converts an object to a Boolean
            </summary>
            <param name="dataIn"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToGuid(System.String)">
            <summary>
            Converts a string representation of a Guid to a Guid
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.ToDate(System.Object)">
            <summary>
            Converts an object to a Nullable DateTime
            </summary>
            <param name="dataIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.GetDate(System.String,System.String)">
            <summary>
            Converts a Date and Time string into a DateTime. Expects the date to be (dd/MM/yyyy).
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.NvcToDictionary(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a Dictionary of string, string
            </summary>
            <param name="nvc"></param>
            <param name="handleMultipleValuesPerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Conversion.NvcToSerializableDictionary(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to an XML-serialisable Dictionary of string, string
            </summary>
            <param name="nvc"></param>
            <param name="handleMultipleValuesPerKey"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat">
            <summary>
            Used in object conversion to string
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat.STRING">
            <summary>
            Normal string
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat.DATE">
            <summary>
            Date string
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat.DATETIME">
            <summary>
            DateTime string
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat.TIME">
            <summary>
            Time string
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Common.EConversionFormat.CURRENCY">
            <summary>
            Currency string
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.FileOperations">
            <summary>
            Common File Operations
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.FileOperations.SanitiseFileName(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToNumberFormat(System.Double,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            Formats a Double
            </summary>
            <param name="value"></param>
            <param name="nfi">can be null to use standard formatting</param>
            <param name="withGroupSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToNumberFormat(System.Decimal,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            Formats a Double
            </summary>
            <param name="value"></param>
            <param name="nfi">can be null to use standard formatting</param>
            <param name="withGroupSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToDateString(System.DateTime)">
            <summary>
            Formats a DateTime to a date string (dd/MM/yyyy)
            </summary>
            <param name="dtIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToDateTimeString(System.DateTime)">
            <summary>
            Formats a DateTime to a date and time string (dd/MM/yyyy HH:mm)
            </summary>
            <param name="dtIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToTimeString(System.DateTime)">
            <summary>
            Formats a DateTime to a 12 hour time string (hh:mm tt)
            </summary>
            <param name="dtIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToJsonDateTimeString(System.DateTime)">
            <summary>
            Formats a DateTime to a JSON DateTime string
            </summary>
            <param name="dtIn"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToFileSize(System.Int64)">
            <summary>
            Formats file size e.g. "4.3TB"
            </summary>
            <param name="fileSizeInBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToHtml(System.Exception)">
            <summary>
            Converts an Exception hierarchy into a HTML representation
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToHtml(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a NameValueCollection into a HTML representation
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Formatting.ToHtml(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Converts a NameValueCollection into a named HTML representation
            </summary>
            <param name="collection"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.EasyDictionary">
            <summary>
            Allows simple Dictionary setup from an anonymous object of KVP
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.EasyDictionary.#ctor(System.Object)">
            <summary>
            Default Constructor
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation">
            <summary>
            Common serialisation classes
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.RemoveAllNamespaces(System.String)">
            <summary>
            Remove all namespaces from an XML document string.
            XML string is parsed into an <see cref="T:System.Xml.XmlDocument"/> to process.
            https://stackoverflow.com/questions/987135/how-to-remove-all-namespaces-from-xml-with-c
            </summary>
            <param name="xmlDocument">XML document as string to parse</param>
            <returns>Cleaned XML document as string</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.RemoveAllNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Remove all namespaces from an <see cref="T:System.Xml.Linq.XElement"/>.
            This function works recursively through the document.
            https://stackoverflow.com/questions/987135/how-to-remove-all-namespaces-from-xml-with-c
            </summary>
            <param name="xmlDocument">XML element to parse</param>
            <returns>XML element that has been cleaned</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.SerialiseToXmlAsync``1(``0,System.Boolean,System.Text.Encoding)">
            <summary>
            Asynchronousely serialise a CLR object of type T.
            </summary>
            <typeparam name="T">The type of the CLR object to serialise</typeparam>
            <param name="source">A CLR object</param>
            <param name="formatForReading">Pretty-print the output. Default is false</param>
            <param name="encoding">Encoding to use when serialising. Default is UTF8.</param>
            <returns>XML-serialised version of the object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.SerialiseToXmlAsync``1(``0,System.IO.MemoryStream,System.Boolean,System.Text.Encoding)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="stream"></param>
            <param name="formatForReading"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.SerialiseToXml``1(``0,System.Boolean,System.Text.Encoding)">
            <summary>
            Synchronousely serialise a CLR object of type T.
            </summary>
            <typeparam name="T">The type of the CLR object to serialise</typeparam>
            <param name="source">A CLR object</param>
            <param name="formatForReading">Pretty-print the output. Default is false</param>
            <param name="encoding">Encoding to use when serialising. Default is UTF8.</param>
            <returns>XML-serialised version of the object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.DeserialiseFromXml``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.DeserialiseFromXml(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.DeserialiseFromJson(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.SerialiseToBase64``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectSource"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.DeserialiseFromBase64``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.Serialisation.SerialiseToUrlEncoded(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.StringWriterWithEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Common.StringWriterWithEncoding.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.StringWriterWithEncoding.#ctor(System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetReadableTypeName(System.Type)">
            <summary>
            Provide a readable name for the Type. Commonly used in documentation.
            TODO: this is HTML-friendly not output-agnostic. Either change the name or alter the function.
            </summary>
            <param name="type">A CLR type</param>
            <returns>The type name</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determine if this type is Nullable
            </summary>
            <param name="type">A CLR type</param>
            <returns>true if Nullable</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetNullableType(System.Type)">
            <summary>
            Gets the underlying type from a Nullable.
            e.g. gets typeof(Int) when given typeof(Int?)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determine if this type is Enumerable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Determine if this type is a Collection
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetGenericEnumeratedType(System.Type)">
            <summary>
            If this type is Enumerable and Generic, get the first Generic argument.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetNonGenericEnumeratedType(System.Type)">
            <summary>
            Get the Enumerated type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.IsDictionary(System.Type)">
            <summary>
            Determine if this type is a Dictionary
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetDictionaryKeyType(System.Type)">
            <summary>
            If this type is a Dictionary, get the type of the Dictionary key
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Common.TypeExtensions.GetDictionaryValueType(System.Type)">
            <summary>
            If this type is a Dictionary, get the type of the Dictionary value
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.CustomHttpExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.CustomHttpExceptionHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.CustomHttpExceptionHandler.HandleExceptionAsync(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            
            </summary>
            <param name="endpointContext"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.EndpointContextExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.EndpointContextExceptionHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.EndpointContextExceptionHandler.ExceptionsHandled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.EndpointContextExceptionHandler.IsHandled(System.Type)">
            <summary>
            
            </summary>
            <param name="exceptionType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.EndpointContextExceptionHandler.HandleExceptionAsync(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            
            </summary>
            <param name="endpointContext"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.IEndpointContextExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.IEndpointContextExceptionHandler.ExceptionsHandled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.IEndpointContextExceptionHandler.IsHandled(System.Type)">
            <summary>
            
            </summary>
            <param name="exceptionType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.IEndpointContextExceptionHandler.HandleExceptionAsync(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.ProblemDetailsExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.ProblemDetailsExceptionHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.ProblemDetailsExceptionHandler.ProblemDetails">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ContextExceptionHandlers.ProblemDetailsExceptionHandler.HandleExceptionAsync(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            
            </summary>
            <param name="endpointContext"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.EndpointContext">
            <summary>
            An encapsulation of the Context through the action/method life-cycle
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Initialises this context
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.HttpContext">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.Endpoint">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ApiMethodItem">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.LinkGenerator">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ActionResult">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.PipelineException">
            <summary>
            An exception that occurs during execution of the Request/Response pipeline
            e.g. in a Filter or action/method execution.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ResponseContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.FormattedBody">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ShortCircuit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ShortCircuitWithException(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.CheckRequest">
            <summary>
            Checks:
            - correct HTTP method used
            - request content-type matches endpoint
            - response content-type is allowed by client
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.UpdateResponseContentType">
            <summary>
            Determine actual response type.
            Can actually remove previous call to IsResponseContentTypeMatch as this will return NULL if no options.
            Sets:
            - EndpointContext.ResponseContentType
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.ParseBodyAsync">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.GetMethodArgumentsAsync">
            <summary>
            Uses the helper method on <see cref="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem"/> to get the method argument values.
            </summary>
            <returns>Method arguments parsed from the Request</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.FormatResponseAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.EndpointContext.GetUri(System.String,System.Object,System.Object)">
            <summary>
            Used for Hateos
            </summary>
            <param name="methodName">Name of the Method within current controller</param>
            <param name="values">Optional route values</param>
            <param name="queryParameters">Optional Query parameters</param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.IEndpointContext">
            <summary>
            An encapsulation of the Context through the action/method life-cycle
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.HttpContext">
            <summary>
            Current HTTP Context
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.Endpoint">
            <summary>
            Matched Endpoint
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ApiMethodItem">
            <summary>
            Description of the executing action/method
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.LinkGenerator">
            <summary>
            Instance of the <see cref="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.LinkGenerator"/>
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ActionResult">
            <summary>
            Result of calling the action/method
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.PipelineException">
            <summary>
            An exception that occurs during execution of the Request/Response pipeline
            e.g. in a Filter or action/method execution.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ResponseContentType">
            <summary>
            Response Content-Type expected/exposed.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.FormattedBody">
            <summary>
            The parsed Request body
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ShortCircuit">
            <summary>
            Skip further filters and actions/methods if TRUE.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ShortCircuitWithException(System.Exception)">
            <summary>
            Short-circuit the Pipeline with an Exception.
            </summary>
            <param name="exception">The Exception to expose to the Pipeline</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.CheckRequest">
            <summary>
            Checks the HTTP Request. If checks fail you can short-circuit with an Exception
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.UpdateResponseContentType">
            <summary>
            Determine actual response type.
            Sets <see cref="P:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ResponseContentType"/>.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.ParseBodyAsync">
            <summary>
            Parse the HTML body and store in the EndpointContext
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.GetMethodArgumentsAsync">
            <summary>
            Obtain the method argument values from the Request
            </summary>
            <returns>Method argument values</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IEndpointContext.FormatResponseAsync">
            <summary>
            Send the method result through the Output Formatters
            </summary>
            <returns>A formatted/serialised response to return to the client</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.ApiAssembly">
            <summary>
            The Assembly to document
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.DocumentationPath">
            <summary>
            The full path to the Documentation file
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.GetSummaryOrDescription(System.Type)">
            <summary>
            Get documentation for Controllers
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.GetSummaryOrDescription(System.Reflection.MethodInfo)">
            <summary>
            Get documentation for Methods
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.GetSummaryOrDescription(System.Reflection.MemberInfo)">
            <summary>
            Get documentation for Members
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider.GetSummaryOrDescription(System.Reflection.ParameterInfo)">
            <summary>
            Get documentation for Parameters
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.ApiAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.DocumentationPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            
            </summary>
            <param name="apiAssembly"></param>
            <param name="xmlDocumentationFilePath"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.GetSummaryOrDescription(System.Type)">
            <summary>
            Used for Controllers / Classes and Parameters
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.GetSummaryOrDescription(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.GetSummaryOrDescription(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.GetSummaryOrDescription(System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.XmlDocumentationProvider.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException">
            <summary>
            A Custom Http error response
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ResponseObject">
            <summary>
            Optional included data, e.g. a token failure response
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.StatusCode">
            <summary>
            HTTP Status code
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.AdditionalTypesIncluded">
            <summary>
            Serialisation Helper
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeClassName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeInnerException">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeHelpURL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeStackTrace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeStackTraceString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeHResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeTargetSite">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeRemoteStackTraceString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeRemoteStackIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeExceptionMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.CustomHttpException.ShouldSerializeWatsonBuckets">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Exceptions.ICustomHttpException">
            <summary>
            A Custom Http error response
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Exceptions.ProblemDetailsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Exceptions.ProblemDetailsException.#ctor(Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails)">
            <summary>
            
            </summary>
            <param name="problemDetails"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Exceptions.ProblemDetailsException.ProblemDetails">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Filters.CreatedAtActionResultFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Filters.CreatedAtActionResultFilter.PostExecution(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            
            </summary>
            <param name="endpointContext"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Filters.IFilter">
            <summary>
            These perform a similar function to Filters in ASP.NET Core (Mvc).
            They are run before and after an action/method is called.
            Only asynchronous filters are supported
            e.g. they can be used to handle: 
            authorisation, 
            response caching, 
            soft-request limiting, 
            etc
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Filters.IFilter.PreExecution(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            PreExecution is called on all registered Filters before executing the action/method.
            Return True to bypass (short-circuit) the request pipeline.
            </summary>
            <param name="endpointContext">An object representing the current Request/Response context</param>
            <returns>True to short-curcuit, False to continue pipeline</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Filters.IFilter.PostExecution(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            PostExecution is called on all registered Filters after executing the action/method.
            Return True to bypass (short-curcuit) the request pipeline.
            </summary>
            <param name="endpointContext">An object representing the current Request/Response context</param>
            <returns>True to short-curcuit, False to continue pipeline</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter">
            <summary>
            Input Formatters convert Request body items into known Method parameter types.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter.SupportedMediaType">
            <summary>
            String representation of the MIME type accepted
            e.g. application/json
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter.SupportedMediaTypeValue">
            <summary>
            The <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue"/> this input formatter supports.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter.HandlesAsyncFormatting">
            <summary>
            Whether this input formatter supports async calls.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter.FormatRequestAsync(System.Object,System.Type)">
            <summary>
            Converts the request's form body into specified type (asynchronously).
            </summary>
            <param name="data">The form body data - usually as a string</param>
            <param name="type">The type to convert to (deserialise)</param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.IInputFormatter.FormatRequest(System.Object,System.Type)">
            <summary>
            Converts the request's form body into specified type (synchronously).
            </summary>
            <param name="data">The form body data - usually as a string</param>
            <param name="type">The type to convert to (deserialise)</param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter">
            <summary>
            Abstract base class for Input Formatters.
            Input Formatters convert Request body items into known Method parameter types
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor for Input Formatter.
            Checks that supportedMediaType is provided and parses into a <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
            <param name="supportedMediaType">The MIME type this formatter supports</param>
            <param name="handlesAsyncFormatting">Whether this formatter supports asynchronous formatting</param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.SupportedMediaType">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.SupportedMediaTypeValue">
            <inheritdoc/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.HandlesAsyncFormatting" -->
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.FormatRequestAsync(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatter.FormatRequest(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJson">
            <summary>
            Input Formatter for "application/json".
            Uses the <see cref="T:System.Text.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJson.#ctor">
            <summary>
            Set MIME type handled to "application/json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJson.#ctor(System.String,System.Boolean)">
            <summary>
            Set MIME type handled to "supportedMimeType"
            </summary>
            <param name="supportedMimeType">Allows sub-setting of the JSON mime-type</param>
            <param name="handlesAsyncFormatting">Whether this formatter supports asynchronous formatting</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJson.FormatRequestAsync(System.Object,System.Type)">
            <summary>
            Asynchronously converts the Input object (text) from JSON into a CLR object
            </summary>
            <param name="data">JSON string object</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJson.FormatRequest(System.Object,System.Type)">
            <summary>
            Synchronously converts the Input object (text) from JSON into a CLR object
            </summary>
            <param name="data">JSON string object</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJsonPatch">
            <summary>
            Input Formatter for "application/json".
            Uses the <see cref="T:System.Text.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJsonPatch.#ctor">
            <summary>
            Set MIME type handled to "application/json-patch+json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJsonPatch.FormatRequestAsync(System.Object,System.Type)">
            <summary>
            Asynchronously converts the JSON Patch document (text) into a CLR object
            </summary>
            <param name="data">JSON string object</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterJsonPatch.FormatRequest(System.Object,System.Type)">
            <summary>
            Synchronously converts the JSON Patch document (text) into a CLR object
            </summary>
            <param name="data">JSON string object</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJson">
            <summary>
            Input Formatter for "application/json".
            Uses the <see cref="T:Newtonsoft.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJson.#ctor">
            <summary>
            Set MIME type handled to "application/json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJson.#ctor(System.String,System.Boolean)">
            <summary>
            Set MIME type handled to "supportedMimeType"
            </summary>
            <param name="supportedMimeType">Allows sub-setting of the JSON mime-type</param>
            <param name="handlesAsyncFormatting"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJson.FormatRequest(System.Object,System.Type)">
            <summary>
            Synchronously converts the Input object (text) from JSON into a CLR object
            </summary>
            <param name="data">JSON string object</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJsonPatch">
            <summary>
            Input Formatter for "application/json-patch+json".
            Uses the <see cref="T:Newtonsoft.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJsonPatch.#ctor">
            <summary>
            Set MIME type handled to "application/json-patch+json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterNewtonsoftJsonPatch.FormatRequest(System.Object,System.Type)">
            <summary>
            Synchronously converts the JSON Patch document (text) into a CLR object.
            </summary>
            <param name="data">JSON Patch document</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterXml">
            <summary>
            Input Formatter for ""application/xml".
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterXml.#ctor">
            <summary>
            Set MIME type handled to "application/xml"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.InputFormatterXml.FormatRequest(System.Object,System.Type)">
            <summary>
            Synchronously converts the XML document (text string) into a CLR object.
            </summary>
            <param name="data">XML document as string</param>
            <param name="type">Destination CLR type</param>
            <returns>CLR object of specified type</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter">
            <summary>
            Output Formatters convert the Response (body) into serialised data for transmission over HTTP.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter.SupportedMediaType">
            <summary>
            String representation of the MIME type supported
            e.g. application/json
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter.SupportedMediaTypeValue">
            <summary>
            The <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue"/> this output formtter supports.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter.HandlesAsyncFormatting">
            <summary>
            Whether this output formatter supports async calls.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter.FormatResponseAsync(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Converts the Response asynchronously.
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.IOutputFormatter.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Converts the Response synchronously.
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter">
            <summary>
            Abstract base class for Output Formatters.
            Output Formatters serialise the Response (body) for transmission over HTTP.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor for Output Formatter.
            Checks that supportedMediaType is provided and parses into a <see cref="T:Microsoft.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
            <param name="supportedMediaType">The MIME type this formatter supports</param>
            <param name="handlesAsyncFormatting">Whether this formatter supports asynchronous formatting</param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.SupportedMediaType">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.SupportedMediaTypeValue">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.HandlesAsyncFormatting">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.FormatResponseAsync(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatter.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterJson">
            <summary>
            Output Formatter for "application/json".
            Uses the <see cref="T:System.Text.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterJson.#ctor">
            <summary>
            Set MIME type handled to "application/json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterJson.#ctor(System.String,System.Boolean)">
            <summary>
            Set MIME type handled to "supportedMimeType"
            </summary>
            <param name="supportedMimeType">Allows sub-setting of the JSON mime-type</param>
            <param name="handlesAsyncFormatting">Whether this formatter supports asynchronous formatting</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterJson.FormatResponseAsync(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Asynchronously converts a CLR object into a JSON-based <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/>
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterJson.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Synchronously converts a CLR object into a JSON-based <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/>
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterNewtonsoftJson">
            <summary>
            Output Formatter for "application/json".
            Uses the <see cref="T:Newtonsoft.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterNewtonsoftJson.#ctor">
            <summary>
            Set MIME type handled to "application/json"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterNewtonsoftJson.#ctor(System.String,System.Boolean)">
            <summary>
            Set MIME type handled to "supportedMimeType"
            </summary>
            <param name="supportedMimeType">Allows sub-setting of the JSON mime-type</param>
            <param name="handlesAsyncFormatting">Whether this formatter supports asynchronous formatting</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterNewtonsoftJson.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Synchronously converts a CLR object into a JSON-based <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/>
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterOpenAPIv3">
            <summary>
            TODO: Provide OpenAPI v3 response
            mime-type = application/openapi-v3+json
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterOpenAPIv3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterTextPlain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterTextPlain.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterTextPlain.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="supportedMimeType"></param>
            <param name="handlesAsyncFormatting"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterTextPlain.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            
            </summary>
            <param name="responseObject"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterXml">
            <summary>
            Supports output formatting to XML (application/xml).
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterXml.#ctor">
            <summary>
            Set MIME type handled to "application/xml"
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterXml.FormatResponseAsync(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Asynchronously converts a CLR object into an XML-based <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/>
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Formatters.OutputFormatterXml.FormatResponse(Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            Synchronously converts a CLR object into an XML-based <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/>
            </summary>
            <param name="responseObject">The <see cref="T:Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject"/> to be serialised</param>
            <returns>The serialised ResponseObject</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddleware">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptionsMonitor{Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions})">
            <summary>
            DI here is Singleton type - app lifetime
            </summary>
            <param name="next"></param>
            <param name="apiMapperOptions"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            DI here is scoped
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddleware.CheckApiVersions(Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion,System.Collections.Generic.List{Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion})">
            <summary>
            Check if the requested ApiVersion is supported by the method
            </summary>
            <param name="requestedVersion"></param>
            <param name="versionsOnMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome">
            <summary>
            Parse result for a source (ie Header, Routem, Query). 
            If successfully parsed, Outcome will be Matched and ApiVersion will contain the successfully parsed version. 
            ... we do not store the value that we attempted to parse so we can send it back.
            At the end of the day, that should be obvious by inspecting the request and it could lead to 
                injection attacks.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.Source">
            <summary>
            Header, Route, Query or other source
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.ApiVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.Outcome">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.ValueIsFaulty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.Matched">
            <summary>
            Version was found and parsed
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.Missing">
            <summary>
            No version specified
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.UnsupportedVersionOnMethod">
            <summary>
            The Method/Action does not support this version
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.UnsupportedMethodOnVersion">
            <summary>
            No Method/Action supports this version (not really used)
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.MalformedVersion">
            <summary>
            Unable to parse the requested version
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.AmbigousVersion">
            <summary>
            Multiple different versions have been requested in the source (Header, Route, Query)
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Middleware.EApiVersionParseOutcome.InconsistentVersion">
            <summary>
            Multiple different versions have been requested across all sources.
            Use <see cref="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.AllowVersionOverrides"/> to examine for this.
            Normally we Query to override Route to override Header.
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.UseVersionRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            This should be run after UseAuth and UseRouting but before UseEndpoints
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.GetHeaderVersion(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Get the ApiVersion from a Header keyed by headerKey
            </summary>
            <param name="context">Current Http Context</param>
            <param name="headerKey">Header key. Default value is "api-version"</param>
            <returns>An ApiVersionParseOutcome object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.GetRouteVersion(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteEndpoint)">
            <summary>
            Get the ApiVersion from the route when route contraint is ":apiVersion" or 
                whatever <see cref="F:Educ8IT.AspNetCore.SimpleApi.RouteContraints.VersionRouteConstraint.RouteConstraintKey"/> defines.
            </summary>
            <param name="context">Current Http Context</param>
            <param name="endpoint">The matched Route Endpoint</param>
            <returns>An ApiVersionParseOutcome object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.GetQueryStringVersion(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Get the ApiVersion from the QueryString keyed by queryKey
            </summary>
            <param name="context">Current Http Context</param>
            <param name="queryKey">QueryString key. Default value is "api-version"</param>
            <returns>An ApiVersionParseOutcome object</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.SendProblemDetailsResponse(Microsoft.AspNetCore.Http.HttpContext,Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="problemDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Middleware.VersionRoutingMiddlewareExtensions.GetProblemDetails(Educ8IT.AspNetCore.SimpleApi.Middleware.ApiVersionParseOutcome,System.Collections.Generic.List{Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion})">
            <summary>
            Return a new Problem Details object for the ApiVersionParseOutcome
            </summary>
            <param name="apiVersionParseOutcome"></param>
            <param name="versionsOnMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.DocumentationProviders">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.SupportedMediaTypes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.InputFormatters">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.OutputFormatters">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.ContextExceptionHandlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.ControllerBaseType">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.UseVersioning">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.DefaultApiVersion">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.AssumeDefaultVersionWhenUnspecified">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.ReportApiVersions">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.HeaderApiVersionKey">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.QueryApiVersionKey">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.AllowVersionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperOptionsDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperOptionsDefaults.DefaultHeaderApiVersionKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperOptionsDefaults.DefaultQueryApiVersionKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperServiceExtensions.ErrorWriter(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperServiceExtensions.FormatResponseAsync(Microsoft.AspNetCore.Http.HttpContext,Educ8IT.AspNetCore.SimpleApi.ActionResults.IActionResult,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="actionResult"></param>
            <param name="mediaTypeHeaderValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Services.ApiMapperServiceExtensions.ApplyResponseAsync(Microsoft.AspNetCore.Http.HttpContext,Educ8IT.AspNetCore.SimpleApi.ApiMapping.ResponseObject)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="responseObject"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.DocumentationProviders">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.SupportedMediaTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.Filters">
            <summary>
            A list of handlers that run on the Request Delegate before and after executing the endpoint itself
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.InputFormatters">
            <summary>
            A list of formatters that convert a request body into usable content
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.OutputFormatters">
            <summary>
            A list of formatters that convert a response object into a HTTP response
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.ContextExceptionHandlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.ControllerBaseType">
            <summary>
            Use this optional property to supply a base type for controllers. 
            By default the framework will find all classes ending in "Controller" (ci). 
            e.g. you could use the optional base class ApiControllerBase or IApiControllerBase or another class/interface.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.UseVersioning">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.DefaultApiVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.AssumeDefaultVersionWhenUnspecified">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.ReportApiVersions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.HeaderApiVersionKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.QueryApiVersionKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions.AllowVersionOverrides">
            <summary>
            Allows versions specified in Query to override Route to override Header
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails">
            <summary>
            Implementation of https://tools.ietf.org/html/rfc7807
            Response type should be application/problem+json or application/problem+xml
            Sub-classes can add additional extensions for e.g. validation information
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Type">
            <summary>
            A URI reference [RFC3986] that identifies the problem type. 
            This specification encourages that, when dereferenced, 
              it provide human-readable documentation for the 
              problem type (e.g., using HTML [W3C.REC-html5-20141028]).  
              When this member is not present, its value is assumed to be "about:blank".
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Title">
            <summary>
            A short, human-readable summary of the problem type.  
            It SHOULD NOT change from occurrence to occurrence of the problem, 
              except for purposes of localization 
              (e.g., using proactive content negotiation; see[RFC7231], Section 3.4).
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Status">
            <summary>
            The HTTP status code ([RFC7231], Section 6) 
              generated by the origin server for this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Detail">
            <summary>
            A human-readable explanation specific to this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Instance">
            <summary>
            A URI reference that identifies the specific occurrence of the problem.  
            It may or may not yield further information if dereferenced.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Validation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetails.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetailsExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetailsExtension.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Models.ProblemDetailsExtension.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.RouteContraints.VersionRouteConstraint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.RouteContraints.VersionRouteConstraint.RouteConstraintKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.RouteContraints.VersionRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <param name="route"></param>
            <param name="routeKey"></param>
            <param name="values"></param>
            <param name="routeDirection"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.RouteContraints.WordRouteContraint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.RouteContraints.WordRouteContraint.RouteConstraintKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.RouteContraints.WordRouteContraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <param name="route"></param>
            <param name="routeKey"></param>
            <param name="values"></param>
            <param name="routeDirection"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ActionRoute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.HttpMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.ParentRoutePrefixes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.Pattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ActionRoute.Order">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionRoute.GetRoutePattern(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="controllerRoutePrefix"></param>
            <param name="defaults"></param>
            <param name="parameterPolicies"></param>
            <param name="requiredValues"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ActionRoute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Routing.CustomConfigurationBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource.#ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternTransformer,Microsoft.Extensions.Logging.ILoggerFactory,Educ8IT.AspNetCore.SimpleApi.IApiMapperService)">
            <summary>
            
            </summary>
            <param name="routePatternTransformer"></param>
            <param name="iLoggerFactory"></param>
            <param name="apiMapperService"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource.Endpoints">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource.GetChangeToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})">
            <summary>
            
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointDataSource.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointRouteBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Routing.CustomEndpointRouteBuilderExtensions.MapFramework(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            
            </summary>
            <param name="endpoints"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilder.Services">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilder.SetupAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions})">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="setupAction"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilderExtensions.AddApiMapperOptions(Educ8IT.AspNetCore.SimpleApi.IApiMapperBuilder,System.Action{Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions})">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="setupAction"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilderExtensions.UseApiMapper(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperBuilderExtensions.UseApiMapper(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="configureRoutes"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapperService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Microsoft.Extensions.Options.IOptionsMonitor{Educ8IT.AspNetCore.SimpleApi.ApiMapperOptions})">
            <summary>
            
            </summary>
            <param name="loggerFactory"></param>
            <param name="apiDescription"></param>
            <param name="apiMapperOptions"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.ApiMapperOptions">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.ApiDescription">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.Controllers">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.Methods">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperService.GetEndpointDelegateProxy(Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem,Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem)">
            <summary>
            
            </summary>
            <param name="apiControllerItem"></param>
            <param name="apiMethodItem"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions.AddApiMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions.AddApiMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions})">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="setupAction"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions.AddDefaultDocumentationProvider(Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions)">
            <summary>
            
            </summary>
            <param name="apiMapperOptions"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions.GetServiceFromCollection``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ApiMapperServiceCollectionExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.IApiMapperBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperBuilder.Services">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperBuilder.SetupAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.IApiMapperService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperService.ApiMapperOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperService.ApiDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperService.Controllers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.IApiMapperService.Methods">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.IApiMapperService.GetEndpointDelegateProxy(Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem,Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem)">
            <summary>
            
            </summary>
            <param name="apiControllerItem"></param>
            <param name="apiMethodItem"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2">
            <summary>
            Courtesy of Peter welter
            https://weblogs.asp.net/pwelter34/444961
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.ThirdParty.XmlSerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="controller"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.ControllerType">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.Ignore">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.RoutePrefixes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.ExcludeFromDocumentation">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.Versions">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.Methods">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.AllowedRequestContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.AllowedResponseContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.Document(Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.SetDefaultVersion(Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.GetVersionedMethods(Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.GetMethods">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiControllerItem.GetApiMethodItem(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.#ctor(System.Reflection.MethodInfo,Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
            <param name="apiControllerItem"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.ApiControllerItem">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.MethodInfo">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.MethodParameters">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.UniqueName">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.Ignore">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.ActionRoutes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.AllowedRequestContentTypes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.AllowedResponseContentTypes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.ExcludeFromDocumentation">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.Versions">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.ResponseTypes">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.ResponseTypesNamed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.IsAsyncMethod">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.SampleRequests">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.SampleResponses">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.Document(Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.IsAllowedHttpMethod(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.GetMethodArgumentsAsync(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.IsRequestContentTypeMatch(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.IsResponseContentTypeMatch(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue})">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.GetPrimaryResponseContentType(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue})">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.GenerateSamples">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiMethodItem.GetUri(Microsoft.AspNetCore.Routing.RouteValueDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameterInfo"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.Document(Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <summary>
            
            </summary>
            <param name="apiDescription"></param>
            <param name="documentationProvider"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromContextAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromHeaderAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromRouteAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromBodyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromFormAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.FromQueryAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsContextParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsHeaderParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsRouteParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsBodyParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsFormParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsQueryParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.ParameterFrom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.ParameterFromText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.Alias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.Annotations">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.ParameterInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsComplexType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsEnumType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.MinLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.SubProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiParameterItem.GetInstanceFromNVC(System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="nameValueCollection"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.Alias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.PropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.IsComplexType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ApiPropertyItem.IsEnumType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.CollectionDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.CollectionDescription.ElementDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ComplexTypeDescription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ComplexTypeDescription.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ComplexTypeDescription.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.DictionaryDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumTypeDescription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumTypeDescription.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumTypeDescription.Values">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumValueDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumValueDescription.Documentation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumValueDescription.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EnumValueDescription.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Service">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Context">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Header">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Route">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Body">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Form">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.EParameterFrom.Query">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.ParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.OriginalFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.ServerFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.FileType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.FileLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.HttpUploadedFile.WriteToFile(System.Guid,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="requestId"></param>
            <param name="buffer"></param>
            <param name="byteLength"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.ControllerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.RoutePrefixes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.ExcludeFromDocumentation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.Versions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.Methods">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.AllowedRequestContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.AllowedResponseContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.Document(Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <summary>
            
            </summary>
            <param name="apiDescription"></param>
            <param name="documentationProvider"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.SetDefaultVersion(Educ8IT.AspNetCore.SimpleApi.Attributes.ApiVersion)">
            <summary>
            
            </summary>
            <param name="apiDefaultVersion"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.GetVersionedMethods(Educ8IT.AspNetCore.SimpleApi.IApiMapperOptions)">
            <summary>
            A method could have several versions but also there could be several methods (each with a different version) for an endpoint.
            All we are concerned with here is the versions for each method.
            </summary>
            <param name="apiMapperOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.GetMethods">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiControllerItem.GetApiMethodItem(System.String)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.Document(Educ8IT.AspNetCore.SimpleApi.ApiDescriptions.IApiDescription,Educ8IT.AspNetCore.SimpleApi.DocumentationProviders.IDocumentationProvider)">
            <summary>
            
            </summary>
            <param name="apiDescription"></param>
            <param name="documentationProvider"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.ApiControllerItem">
            <summary>
            A ref to the parent Controller
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.MethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.MethodParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.UniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.ActionRoutes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.AllowedRequestContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.AllowedResponseContentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.ExcludeFromDocumentation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.Versions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.ResponseTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.ResponseTypesNamed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.IsAsyncMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.IsRequestContentTypeMatch(System.String)">
            <summary>
            
            </summary>
            <param name="requestContentType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.IsResponseContentTypeMatch(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue})">
            <summary>
            
            </summary>
            <param name="acceptHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.GetPrimaryResponseContentType(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue})">
            <summary>
            
            </summary>
            <param name="acceptHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.IsAllowedHttpMethod(System.String)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.GetMethodArgumentsAsync(Educ8IT.AspNetCore.SimpleApi.EndpointContext)">
            <summary>
            Used by the Delegate to bind passed arguments from the Header, Body, Form, QueryString and Route
            </summary>
            <param name="endpointContext">Extended context for this Request</param>
            <returns>Method arguments parsed from the Request</returns>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.SampleRequests">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.SampleResponses">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.GenerateSamples">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.IApiMethodItem.GetUri(Microsoft.AspNetCore.Routing.RouteValueDictionary)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ITypeDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ITypeDescription.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ITypeDescription.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.ITypeDescription.Description">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.KeyValuePairDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.KeyValuePairDescription.KeyDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.KeyValuePairDescription.ValueDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.SimpleTypeDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.TypeDescriptions.TypeDescription.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
