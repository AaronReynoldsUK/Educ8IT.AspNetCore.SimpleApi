<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Educ8IT.AspNetCore.SimpleApi.Identity</name>
    </assembly>
    <members>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiUsers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiRoles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiClaims">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiUserTokens">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiMfas">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiRoleClaimLinks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiUserClaimLinks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.ApiUserRoleLinks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit.MigrateDatabase``1(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit.DbInitialiserHandler">
            <summary>
            Delegate for a local Initialiser for the IdentityDb
            </summary>
            <param name="identityDbContext"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit.Initialiser(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit.DbInitialiserHandler)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="initialiser"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbInit.InitialiseIdentityDb(Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext)">
            <summary>
            
            </summary>
            <param name="identityDbContext"></param>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.EMfaMethod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.EMfaMethod.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.EMfaMethod.TOTP">
            <summary>
            Time-based One-time Password Algorithm
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.EMfaMethod.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.EMfaMethod.SMS">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.LockoutAfterNFailedAttempts">
            <summary>
            Limit the number of failed attempts to Authenticate.
            A value of 0 indicates no lock-outs to be enforced.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.LockoutFor">
            <summary>
            The period to lockout an account.
            The default is 900s = 15 minutes.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedPasswordLength">
            <summary>
            Specify the length when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedPasswordsIncludeLowerCase">
            <summary>
            Include lower-case letters when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedPasswordsIncludeNumbers">
            <summary>
            Include numbers when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedPasswordsIncludeSymbols">
            <summary>
            Include symbols when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedPasswordsIncludeUpperCase">
            <summary>
            Include upper-case letters when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.GeneratedTokenLength">
            <summary>
            Specify the length when generating new random tokens
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.AccessTokenLifespan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions.RefreshTokenLifespan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.HasDbContext">
            <inheritdoc/>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetIdentityDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.Options">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerOptions},Educ8IT.AspNetCore.SimpleApi.Identity.IdentityDbContext)">
            <summary>
            
            </summary>
            <param name="loggerFactory"></param>
            <param name="options"></param>
            <param name="identityDbContext"></param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetTokenByIdAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetTokenByTokenValueAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetTokenByTokenValueAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetTokensByUserIdAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetUserByIdAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetUserByUserNameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetUserByEmailAddressAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.IsValidPasswordAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.CanSignInAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.RecordFailedAuthentication(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.ResetFailedAuthentication(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GenerateNewPassword(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GenerateNewToken(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.UpdatePasswordHash(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.StoreToken(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.RemoveToken(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.RemoveUserTokens(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.RemoveExpiredTokens">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.NewTokenAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.RegisterAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetClaimsPrinciple(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.UpdateClaims(System.Security.Claims.ClaimsPrincipal,Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken)">
            <inheritdoc/>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IdentityManagerService.GetMfaEntriesByUserIdAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions">
            <summary>
            Options object for the IdentityManager
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.LockoutAfterNFailedAttempts">
            <summary>
            Limit the number of failed attempts to Authenticate.
            A value of 0 indicates no lock-outs to be enforced.
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.LockoutFor">
            <summary>
            The period to lockout an account
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedPasswordLength">
            <summary>
            Specify the length when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedPasswordsIncludeLowerCase">
            <summary>
            Include lower-case letters when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedPasswordsIncludeNumbers">
            <summary>
            Include numbers when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedPasswordsIncludeSymbols">
            <summary>
            Include symbols when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedPasswordsIncludeUpperCase">
            <summary>
            Include upper-case letters when generating new random passwords
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.GeneratedTokenLength">
            <summary>
            Specify the length when generating new random tokens
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.AccessTokenLifespan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerOptions.RefreshTokenLifespan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.HasDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetTokenByIdAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="tokenId"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetTokenByTokenValueAsync(System.String)">
            <summary>
            
            </summary>
            <param name="tokenValue"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetTokenByTokenValueAsync(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tokenValue"></param>
            <param name="tokenType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetTokensByUserIdAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetUserByIdAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetUserByUserNameAsync(System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetUserByEmailAddressAsync(System.String)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.IsValidPasswordAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String)">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.CanSignInAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <summary>
            Checks if the account is disabled or locked out in some way
            </summary>
            <param name="apiUser"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.RecordFailedAuthentication(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.ResetFailedAuthentication(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser)">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GenerateNewPassword(System.Int32)">
            <summary>
            Generates a new random password using the Options specified in the setup action on IdentityManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GenerateNewToken(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.UpdatePasswordHash(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String)">
            <summary>
            This will generate a new password hash for the supplied password. 
            Use GenerateNewPassword() to get a new random password.
            The hashed password is updated on the ApiUser object and saved to the data store.
            The hash password is returned.
            </summary>
            <param name="apiUser">The ApiUser which will be updated with the new hashed password</param>
            <param name="password">The password to HASH.</param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.StoreToken(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken)">
            <summary>
            
            </summary>
            <param name="apiUserToken"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.RemoveToken(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="tokenType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.RemoveUserTokens(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <param name="transientOnly"></param>
            <param name="tokenType"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.RemoveExpiredTokens">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.NewTokenAsync(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <param name="tokenType"></param>
            <param name="ttl"></param>
            <param name="extendedData"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.RegisterAsync(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetClaimsPrinciple(Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser,System.String,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            
            </summary>
            <param name="apiUser"></param>
            <param name="schemeName"></param>
            <param name="extraClaims"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.UpdateClaims(System.Security.Claims.ClaimsPrincipal,Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="apiUserToken"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.IIdentityManagerService.GetMfaEntriesByUserIdAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiClaim">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiClaim.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiClaim.ClaimType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiClaim.ClaimValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiMfa.User">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRole.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRole.RoleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRole.LinkedClaims">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRoleClaimLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRoleClaimLink.RoleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRoleClaimLink.Role">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRoleClaimLink.ClaimId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiRoleClaimLink.Claim">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.LinkedId">
            <summary>
            The Id in the external data set / context
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.EmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.EmailAddressIsConfirmed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.PasswordHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.AccessFailedAttemptsTotal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.AccessFailedAttemptsCurrent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.LockoutUntil">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.LinkedRoles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.LinkedClaims">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.UserTokens">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.MfaOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.IsLockedOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.LockOutExpired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.ApiClaims">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.Claims">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUser.RolesAsClaims">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserClaimLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserClaimLink.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserClaimLink.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserClaimLink.ClaimId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserClaimLink.Claim">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserRoleLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserRoleLink.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserRoleLink.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserRoleLink.RoleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserRoleLink.Role">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.TokenType">
            <summary>
            e.g. auth_token, mfa_token, refresh_token, email_confirmation_token
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.ValidFrom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.ValidUntil">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.ExtendedDataInDb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.ExtendedData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.IsExpired">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.SetExtendedData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="extendedData"></param>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.ApiUserToken.HasExtendedData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Base32Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Base32Encoding.ToBytes(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Base32Encoding.ToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp">
            <summary>
            Calculate HMAC-Based One-Time-Passwords (HOTP) from a secret key
            </summary>
            <remarks>
            The specifications for this are found in RFC 4226
            http://tools.ietf.org/html/rfc4226
            </remarks>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp.#ctor(System.Byte[],Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Int32)">
            <summary>
            Create a HOTP instance
            </summary>
            <param name="secretKey">The secret key to use in HOTP calculations</param>
            <param name="mode">The hash mode to use</param>
            <param name="hotpSize">The number of digits that the returning HOTP should have.  The default is 6.</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp.#ctor(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Int32)">
            <summary>
            Create a HOTP instance
            </summary>
            <param name="key">The key to use in HOTP calculations</param>
            <param name="mode">The hash mode to use</param>
            <param name="hotpSize">The number of digits that the returning HOTP should have.  The default is 6.</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp.ComputeHOTP(System.Int64)">
            <summary>
            Takes a counter and then computes a HOTP value
            </summary>
            <param name="timestamp">The timestamp to use for the HOTP calculation</param>
            <returns>a HOTP value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp.VerifyHotp(System.String,System.Int64)" -->
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Hotp.Compute(System.Int64,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Takes a time step and computes a HOTP code
            </summary>
            <param name="counter">counter</param>
            <param name="mode">The hash mode to use</param>
            <returns>HOTP calculated code</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider">
            <summary>
            Interface used to interact with a key
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider.ComputeHmac(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Byte[])">
            <summary>
            Uses the key to get an HMAC using the specified algorithm and data
            </summary>
            <remarks>
            This is a much better API than the previous API which would briefly expose the key for all derived types.
            
            Now a derived type could be bound to an HSM/smart card/etc if required and a lot of the security limitations
            of in app/memory exposure of the key can be eliminated.
            </remarks>
            <param name="mode">The HMAC algorithm to use</param>
            <param name="data">The data used to compute the HMAC</param>
            <returns>HMAC of the key and data</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.InMemoryKey">
            <summary>
            Represents a key in memory
            </summary>
            <remarks>
            This will attempt to use the Windows data protection api to encrypt the key in memory.
            However, this type favors working over memory protection. This is an attempt to minimize
            exposure in memory, nothing more. This protection is flawed in many ways and is limited
            to Windows.
            
            In order to use the key to compute an hmac it must be temporarily decrypted, used,
            then re-encrypted. This does expose the key in memory for a time. If a memory dump occurs in this time
            the plaintext key will be part of it. Furthermore, there are potentially
            artifacts from the hmac computation, GC compaction, or any number of other leaks even after
            the key is re-encrypted.
            
            This type favors working over memory protection. If the particular platform isn't supported then,
            unless forced by modifying the IsPlatformSupported method, it will just store the key in a standard
            byte array.
            </remarks>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.InMemoryKey.#ctor(System.Byte[])">
            <summary>
            Creates an instance of a key.
            </summary>
            <param name="key">Plaintext key data</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.InMemoryKey.GetCopyOfKey">
            <summary>
            Gets a copy of the plaintext key
            </summary>
            <remarks>
            This is internal rather than protected so that the tests can use this method
            </remarks>
            <returns>Plaintext Key</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.InMemoryKey.ComputeHmac(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Byte[])">
            <summary>
            Uses the key to get an HMAC using the specified algorithm and data
            </summary>
            <param name="mode">The HMAC algorithm to use</param>
            <param name="data">The data used to compute the HMAC</param>
            <returns>HMAC of the key and data</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.InMemoryKey.CreateHmacHash(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Create an HMAC object for the specified algorithm
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyGeneration">
            <summary>
            Helpers to work with keys
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyGeneration.GenerateRandomKey(System.Int32)">
            <summary>
            Generates a random key in accordance with the RFC recommened length for each algorithm
            </summary>
            <param name="length">Key length</param>
            <returns>The generated key</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyGeneration.GenerateRandomKey(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Generates a random key in accordance with the RFC recommened length for each algorithm
            </summary>
            <param name="mode">HashMode</param>
            <returns>Key</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyGeneration.DeriveKeyFromMaster(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider,System.Byte[],Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Uses the procedure defined in RFC 4226 section 7.5 to derive a key from the master key
            </summary>
            <param name="masterKey">The master key from which to derive a device specific key</param>
            <param name="publicIdentifier">The public identifier that is unique to the authenticating device</param>
            <param name="mode">The hash mode to use.  This will determine the resulting key lenght.  The default is sha-1 (as per the RFC) which is 20 bytes</param>
            <returns>Derived key</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyGeneration.DeriveKeyFromMaster(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider,System.Int32,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Uses the procedure defined in RFC 4226 section 7.5 to derive a key from the master key
            </summary>
            <param name="masterKey">The master key from which to derive a device specific key</param>
            <param name="serialNumber">A serial number that is unique to the authenticating device</param>
            <param name="mode">The hash mode to use.  This will determine the resulting key lenght.  The default is sha-1 (as per the RFC) which is 20 bytes</param>
            <returns>Derived key</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyUtilities">
            <summary>
            Some helper methods to perform common key functions
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyUtilities.Destroy(System.Byte[])">
            <summary>
            Overwrite potentially sensitive data with random junk
            </summary>
            <remarks>
            Warning!
            
            This isn't foolproof by any means.  The garbage collector could have moved the actual
            location in memory to another location during a collection cycle and left the old data in place
            simply marking it as available.  We can't control this or even detect it.
            This method is simply a good faith effort to limit the exposure of sensitive data in memory as much as possible
            </remarks>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyUtilities.GetBigEndianBytes(System.Int64)">
            <summary>
            converts a long into a big endian byte array.
            </summary>
            <remarks>
            RFC 4226 specifies big endian as the method for converting the counter to data to hash.
            </remarks>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.KeyUtilities.GetBigEndianBytes(System.Int32)">
            <summary>
            converts an int into a big endian byte array.
            </summary>
            <remarks>
            RFC 4226 specifies big endian as the method for converting the counter to data to hash.
            </remarks>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp">
            <summary>
            An abstract class that contains common OTP calculations
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4226
            </remarks>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.secretKey">
            <summary>
            Secret key
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.hashMode">
            <summary>
            The hash mode to use
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.#ctor(System.Byte[],Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Constructor for the abstract class using an explicit secret key
            </summary>
            <param name="secretKey"></param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.#ctor(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Constructor for the abstract class using a generic key provider
            </summary>
            <param name="key"></param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.Compute(System.Int64,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            An abstract definition of a compute method.  Takes a counter and runs it through the derived algorithm.
            </summary>
            <param name="counter">Counter or step</param>
            <param name="mode">The hash mode to use</param>
            <returns>OTP calculated code</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.CalculateOtp(System.Byte[],Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Helper method that calculates OTPs
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.Digits(System.Int64,System.Int32)">
            <summary>
            truncates a number down to the specified number of digits
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Otp.Verify(System.Int64,System.String,System.Int64@,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow)">
            <summary>
            Verify an OTP value
            </summary>
            <param name="initialStep">The initial step to try</param>
            <param name="valueToVerify">The value to verify</param>
            <param name="matchedStep">Output parameter that provides the step where the match was found.  If no match was found it will be 0</param>
            <param name="window">The window to verify</param>
            <returns>True if a match is found</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode">
            <summary>
            Indicates which HMAC hashing algorithm should be used
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode.Sha1">
            <summary>
            Sha1 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode.Sha256">
            <summary>
            Sha256 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode.Sha512">
            <summary>
            Sha512 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection">
            <summary>
            Class to apply a correction factor to the system time
            </summary>
            <remarks>
            In cases where the local system time is incorrect it is preferable to simply correct the system time.
            This class is provided to handle cases where it isn't possible for the client, the server, or both, to be on the correct time.
            
            This library provides limited facilities to to ping NIST for a correct network time.  This class can be used manually however in cases where a server's time is off
            and the consumer of this library can't control it.  In that case create an instance of this class and provide the current server time as the correct time parameter
            
            This class is immutable and therefore threadsafe
            </remarks>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.UncorrectedInstance">
            <summary>
            An instance that provides no correction factor
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.#ctor">
            <summary>
            Constructor used solely for the UncorrectedInstance static field to provide an instance without a correction factor.
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.#ctor(System.DateTime)">
            <summary>
            Creates a corrected time object by providing the known correct current UTC time.  The current system UTC time will be used as the reference
            </summary>
            <remarks>
            This overload assumes UTC.  If a base and reference time other than UTC are required then use the other overlaod.
            </remarks>
            <param name="correctUtc">The current correct UTC time</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a corrected time object by providing the known correct current time and the current reference time that needs correction
            </summary>
            <param name="correctTime">The current correct time</param>
            <param name="referenceTime">The current reference time (time that will have the correction factor applied in subsequent calls)</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.GetCorrectedTime(System.DateTime)">
            <summary>
            Applies the correction factor to the reference time and returns a corrected time
            </summary>
            <param name="referenceTime">The reference time</param>
            <returns>The reference time with the correction factor applied</returns>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.CorrectedUtcNow">
            <summary>
            Applies the correction factor to the current system UTC time and returns a corrected time
            </summary>
        </member>
        <member name="P:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection.CorrectionFactor">
            <summary>
            The timespan that is used to calculate a corrected time
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp">
            <summary>
            Calculate Timed-One-Time-Passwords (TOTP) from a secret key
            </summary>
            <remarks>
            The specifications for this are found in RFC 6238
            http://tools.ietf.org/html/rfc6238
            </remarks>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.unixEpochTicks">
            <summary>
            The number of ticks as Measured at Midnight Jan 1st 1970;
            </summary>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.ticksToSeconds">
            <summary>
            A divisor for converting ticks to seconds
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.#ctor(System.Byte[],System.Int32,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Int32,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection)">
            <summary>
            Create a TOTP instance
            </summary>
            <param name="secretKey">The secret key to use in TOTP calculations</param>
            <param name="step">The time window step amount to use in calculating time windows.  The default is 30 as recommended in the RFC</param>
            <param name="mode">The hash mode to use</param>
            <param name="totpSize">The number of digits that the returning TOTP should have.  The default is 6.</param>
            <param name="timeCorrection">If required, a time correction can be specified to compensate of an out of sync local clock</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.#ctor(Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.IKeyProvider,System.Int32,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode,System.Int32,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.TimeCorrection)">
            <summary>
            Create a TOTP instance
            </summary>
            <param name="key">The secret key to use in TOTP calculations</param>
            <param name="step">The time window step amount to use in calculating time windows.  The default is 30 as recommended in the RFC</param>
            <param name="mode">The hash mode to use</param>
            <param name="totpSize">The number of digits that the returning TOTP should have.  The default is 6.</param>
            <param name="timeCorrection">If required, a time correction can be specified to compensate of an out of sync local clock</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.ComputeTotp(System.DateTime)">
            <summary>
            Takes a timestamp and applies correction (if provided) and then computes a TOTP value
            </summary>
            <param name="timestamp">The timestamp to use for the TOTP calculation</param>
            <returns>a TOTP value</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.ComputeTotp">
            <summary>
            Takes a timestamp and computes a TOTP value for corrected UTC now
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <returns>a TOTP value</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.VerifyTotp(System.String,System.Int64@,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow)">
            <summary>
            Verify a value that has been provided with the calculated value.
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <param name="totp">the trial TOTP value</param>
            <param name="timeStepMatched">
            This is an output parameter that gives that time step that was used to find a match.
            This is useful in cases where a TOTP value should only be used once.  This value is a unique identifier of the
            time step (not the value) that can be used to prevent the same step from being used multiple times
            </param>
            <param name="window">The window of steps to verify</param>
            <returns>True if there is a match.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.VerifyTotp(System.DateTime,System.String,System.Int64@,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow)">
            <summary>
            Verify a value that has been provided with the calculated value
            </summary>
            <param name="timestamp">The timestamp to use</param>
            <param name="totp">the trial TOTP value</param>
            <param name="timeStepMatched">
            This is an output parameter that gives that time step that was used to find a match.
            This is usefule in cases where a TOTP value should only be used once.  This value is a unique identifier of the
            time step (not the value) that can be used to prevent the same step from being used multiple times
            </param>
            <param name="window">The window of steps to verify</param>
            <returns>True if there is a match.</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.CalculateTimeStepFromTimestamp(System.DateTime)">
            <summary>
            Takes a timestamp and calculates a time step
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.RemainingSeconds">
            <summary>
            Remaining seconds in current window based on UtcNow
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <returns>Number of remaining seconds</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.RemainingSeconds(System.DateTime)">
            <summary>
            Remaining seconds in current window
            </summary>
            <param name="timestamp">The timestamp</param>
            <returns>Number of remaining seconds</returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.Totp.Compute(System.Int64,Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.OtpHashMode)">
            <summary>
            Takes a time step and computes a TOTP code
            </summary>
            <param name="counter">time step</param>
            <param name="mode">The hash mode to use</param>
            <returns>TOTP calculated code</returns>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow">
            <summary>
            A verification window
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an instance of a verification window
            </summary>
            <param name="previous">The number of previous frames to accept</param>
            <param name="future">The number of future frames to accept</param>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow.ValidationCandidates(System.Int64)">
            <summary>
            Gets an enumberable of all the possible validation candidates
            </summary>
            <param name="initialFrame">The initial frame to validate</param>
            <returns>Enumberable of all possible frames that need to be validated</returns>
        </member>
        <member name="F:Educ8IT.AspNetCore.SimpleApi.Identity.OtpNet.VerificationWindow.RfcSpecifiedNetworkDelay">
            <summary>
            The verification window that accomodates network delay that is recommended in the RFC
            </summary>
        </member>
        <member name="T:Educ8IT.AspNetCore.SimpleApi.Identity.Passwords">
            <summary>
            Utility Class for passwords
            </summary>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.Passwords.GeneratePassword(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generate a random password of at least 8 characters
            </summary>
            <param name="length"></param>
            <param name="includeLowerCase"></param>
            <param name="includeNumbers"></param>
            <param name="includeSymbols"></param>
            <param name="includeUpperCase"></param>
            <returns></returns>
        </member>
        <member name="M:Educ8IT.AspNetCore.SimpleApi.Identity.Passwords.Jumble(System.String)">
            <summary>
            Jumble the characters in a string
            </summary>
            <param name="stringToJumble"></param>
            <returns></returns>
        </member>
    </members>
</doc>
